/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Instructor } from "./Instructor";
import { InstructorCountArgs } from "./InstructorCountArgs";
import { InstructorFindManyArgs } from "./InstructorFindManyArgs";
import { InstructorFindUniqueArgs } from "./InstructorFindUniqueArgs";
import { CreateInstructorArgs } from "./CreateInstructorArgs";
import { UpdateInstructorArgs } from "./UpdateInstructorArgs";
import { DeleteInstructorArgs } from "./DeleteInstructorArgs";
import { CourseFindManyArgs } from "../../course/base/CourseFindManyArgs";
import { Course } from "../../course/base/Course";
import { LiveSessionFindManyArgs } from "../../liveSession/base/LiveSessionFindManyArgs";
import { LiveSession } from "../../liveSession/base/LiveSession";
import { InstructorService } from "../instructor.service";
@graphql.Resolver(() => Instructor)
export class InstructorResolverBase {
  constructor(protected readonly service: InstructorService) {}

  async _instructorsMeta(
    @graphql.Args() args: InstructorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Instructor])
  async instructors(
    @graphql.Args() args: InstructorFindManyArgs
  ): Promise<Instructor[]> {
    return this.service.instructors(args);
  }

  @graphql.Query(() => Instructor, { nullable: true })
  async instructor(
    @graphql.Args() args: InstructorFindUniqueArgs
  ): Promise<Instructor | null> {
    const result = await this.service.instructor(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Instructor)
  async createInstructor(
    @graphql.Args() args: CreateInstructorArgs
  ): Promise<Instructor> {
    return await this.service.createInstructor({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Instructor)
  async updateInstructor(
    @graphql.Args() args: UpdateInstructorArgs
  ): Promise<Instructor | null> {
    try {
      return await this.service.updateInstructor({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Instructor)
  async deleteInstructor(
    @graphql.Args() args: DeleteInstructorArgs
  ): Promise<Instructor | null> {
    try {
      return await this.service.deleteInstructor(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Course], { name: "courses" })
  async findCourses(
    @graphql.Parent() parent: Instructor,
    @graphql.Args() args: CourseFindManyArgs
  ): Promise<Course[]> {
    const results = await this.service.findCourses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [LiveSession], { name: "liveSessions" })
  async findLiveSessions(
    @graphql.Parent() parent: Instructor,
    @graphql.Args() args: LiveSessionFindManyArgs
  ): Promise<LiveSession[]> {
    const results = await this.service.findLiveSessions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
