/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Instructor as PrismaInstructor,
  Course as PrismaCourse,
  LiveSession as PrismaLiveSession,
} from "@prisma/client";

export class InstructorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InstructorCountArgs, "select">
  ): Promise<number> {
    return this.prisma.instructor.count(args);
  }

  async instructors<T extends Prisma.InstructorFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.InstructorFindManyArgs>
  ): Promise<PrismaInstructor[]> {
    return this.prisma.instructor.findMany<Prisma.InstructorFindManyArgs>(args);
  }
  async instructor<T extends Prisma.InstructorFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.InstructorFindUniqueArgs>
  ): Promise<PrismaInstructor | null> {
    return this.prisma.instructor.findUnique(args);
  }
  async createInstructor<T extends Prisma.InstructorCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InstructorCreateArgs>
  ): Promise<PrismaInstructor> {
    return this.prisma.instructor.create<T>(args);
  }
  async updateInstructor<T extends Prisma.InstructorUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InstructorUpdateArgs>
  ): Promise<PrismaInstructor> {
    return this.prisma.instructor.update<T>(args);
  }
  async deleteInstructor<T extends Prisma.InstructorDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.InstructorDeleteArgs>
  ): Promise<PrismaInstructor> {
    return this.prisma.instructor.delete(args);
  }

  async findCourses(
    parentId: string,
    args: Prisma.CourseFindManyArgs
  ): Promise<PrismaCourse[]> {
    return this.prisma.instructor
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .courses(args);
  }

  async findLiveSessions(
    parentId: string,
    args: Prisma.LiveSessionFindManyArgs
  ): Promise<PrismaLiveSession[]> {
    return this.prisma.instructor
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .liveSessions(args);
  }
}
